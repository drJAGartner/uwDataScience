# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
# Peak at a bit of the data
head(ILPD);
for(i in 1:length(ILPD[,2]))
{
if(ILPD[i,2]=="Female")
{
ILPD[i,2]<-"1";
} else {
ILPD[i,2]<-"0";
}
}
# Peak at a bit of the data
head(ILPD);
ILPD<-read.csv(url, header=TRUE);
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
# Peak at a bit of the data
head(ILPD);
ILPD[,2]
for(i in 1:length(ILPD[,2]))
{
if(ILPD[i,2]=="Female")
{
ILPD[i,2]<-"1";
} else {
ILPD[i,2]<-"0";
}
}
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
# Download a rectangular dataset
ILPD<-read.csv(url, header=TRUE);
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
# Peak at a bit of the data
head(ILPD);
ILPD[i,2]
type(ILPD[i,2])
typeof(ILPD[i,2])
typeof(ILPD[1,2])
typeof(ILPD[,2])
ILPD
ILPD[,2]=="Female"
ILPD[ILPD == "Female"] <- "1"
ILPD[ILPD == "Male"] <- "0"
# Download a rectangular dataset
ILPD<-read.csv(url, header=TRUE);
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
# Peak at a bit of the data
head(ILPD);
ILPD[ILPD == "Female"]
ILPD<-read.csv(url, header=TRUE);
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
# Peak at a bit of the data
head(ILPD);
ILPD[ILPD == "Male"]
ILPD
ILPD[,2]
?typeof
typeof(ILPD)
typeof(ILPD[,2])
typeof(ILPD[1,2])
ILPD[ILPD == Female] <- "1"
ILPD[ILPD == Male] <- "0"
ILPD[ILPD == "Female"] <- "1"
ILPD[ILPD == "Male"] <- "0"
ILPD
x <- c("Car", "Automobile", "Bike", "Truck", "Bicycle", "Sedan", "Coupe", "Cycle", "Truck", "Velo", "Automobile", "Bike")
x[x == "Automobile"] <- "Car"
x
typeof(x)
GenerCol <- ILPD[,2]
## 1a
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
# Download a rectangular dataset
ILPD<-read.csv(url, header=TRUE);
## 1b -d
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
## 2a
# Peak at a bit of the data
head(ILPD);
GenerCol <- ILPD[,2]
GenerCol
## 1a
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
# Download a rectangular dataset
ILPD<-read.csv(url, header=TRUE);
## 1b -d
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
## 2a
# Peak at a bit of the data
head(ILPD);
## DATA CLEANING
# Male/Female is non numeric, convert to isFemale
GenderCol <- ILPD[,2]
GenderCol[GenderCol == "Female"] <- "1"
GenderCol[GenderCol == "Male"] <- "0"
?levels
head(ILPD);
?read.csv
## 1a
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
# Download a rectangular dataset
vecClass<-c('numeric', 'character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
ILPD<-read.csv(url, header=TRUE, colClasses=vecClass);
## 1b -d
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
## 2a
# Peak at a bit of the data
head(ILPD);
GenderCol <- ILPD[,2]
GenderCol[GenderCol == "Female"] <- "1"
GenderCol[GenderCol == "Male"] <- "0"
ILPD[,2]<GenderCol
GenderCol
ILPD[,2]<-GenderCol
sapply(ILPD, mean)
sapply(ILPD.complete, mean)
sapply(ILPD, sd)
sapply(ILPD.complete, sd)
sapply(ILPD, median)
sapply(ILPD.complete, median)
ILPD[,2]
sapply(ILPD, mean)
sapply(ILPD.complete, mean)
ILPD.complete <- ILPD[complete.cases(ILPD),]
sapply(ILPD.complete, mean)
GenderCol <- ILPD[,2]
GenderCol[GenderCol == "Female"] <- 1
GenderCol[GenderCol == "Male"] <- 0
ILPD[,2]<-GenderCol
ILPD[,2]
?atomic
?as.integer
ILPD[,2]<-as.integer(GenderCol)
ILPD[,2]
## 1a
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
# Download a rectangular dataset
# vector types are used to keep the gender cols from automatically being of type logical, which are cumbersome to convert
vecClass<-c('numeric', 'character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
ILPD<-read.csv(url, header=TRUE, colClasses=vecClass);
## 1b -d
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
## 2a
# Peak at a bit of the data
head(ILPD);
## DATA CLEANING - Not explicitly instructed, but I felt it was within the spirit of the assignment
# Male/Female is non numeric, convert to isFemale
GenderCol <- ILPD[,2]
GenderCol[GenderCol == "Female"] <- 1
GenderCol[GenderCol == "Male"] <- 0
ILPD[,2]<-as.integer(GenderCol) # R will try to convert back to character unless you force it
ILPD[,2]
# The 'AG' column contains N/A values, we remove the small number of rows with such features.
ILPD.complete <- ILPD[complete.cases(ILPD),]
sapply(ILPD, mean)
sapply(ILPD.complete, mean)
sapply(ILPD, sd)
sapply(ILPD.complete, sd)
sapply(ILPD, median)
sapply(ILPD.complete, median)
sd(ILPD[,10])
sd(ILPD[,10],na.rm=TRUE)
hist(ILPD)
hist(ILPD[,1])
hist(ILPD[,2])
hist(ILPD[,3])
?hist
hist(ILPD[,3])
#Need log to make sense of it
hist(ILPD[,3])
?hist
hist(ILPD[,2], xlab='Gender (0=Male, 1=Female)')
hist(ILPD[,2], xlab='Gender (0=Male, 1=Female)', main="Gender")
hist(ILPD[,1], xlab='Age', main="ILPD Age")
hist(ILPD[,3])
hist(log10(ILPD[,3]), xlab='Total Bilirubin', main="ILPD Bilirubin ")
hist(log10(ILPD[,3]), xlab='Total Bilirubin', main="ILPD Bilirubin", ylab="(log10 of Frequency)")
hist(log10(ILPD[,3]), xlab='Total Bilirubin', main="ILPD Bilirubin", ylab="log10(Frequency)")
hist(ILPD[,4])
hist(ILPD[,4], xlab='Direct Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,4], xlab='Count', main="Alkphos Alkaline Phosphotase")
hist(ILPD[,4], xlab='Count', main="Alkphos Alkaline Phosphotase")
hist(log10(ILPD[,4]), xlab='Count', main="Alkphos Alkaline Phosphotase", ylab="log10(Frequency)")
hist(ILPD[,4], xlab='Count', main="Alkphos Alkaline Phosphotase")
hist(log10(ILPD[,4]), xlab='Count', main="Alkphos Alkaline Phosphotase", ylab="log10(Frequency)")
hist(ILPD[,4], xlab='Count', main="Alkphos Alkaline Phosphotase")
hist(log10(ILPD[,3]), xlab='Count', main="ILPD Bilirubin", ylab="log10(Frequency)")
hist(ILPD[,3], xlab='Count', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Count', main="ILPD Bilirubin", ylab="log(Frequency)", log="y")
hist(log(ILPD[,3]), xlab='Count', main="ILPD Bilirubin", ylab="log(Frequency)")
hist(ILPD[,3], xlab='Count', main="ILPD Bilirubin")
?hist
hist(ILPD[,3], xlab='Count', main="ILPD Bilirubin")
hist(log(ILPD[,3]), xlab='Count', xlim=c(0,60), main="ILPD Bilirubin", ylab="log(Frequency)")
hist(log(ILPD[,3]), xlab='Count', xlim=c(0,60), breaks=6, main="ILPD Bilirubin", ylab="log(Frequency)")
hist(ILPD[,3], xlab='Count', main="ILPD Bilirubin")
summary(ILPD)
boxplot(ILPD[,3])
hist(log(ILPD[,3]), xlab='Count', breaks=C(0,1,2,3,4,5,7.5,10,15,20,40,80), main="ILPD Bilirubin", ylab="log(Frequency)")
hist(log(ILPD[,3]), xlab='Count', breaks=c(0,1,2,3,4,5,7.5,10,15,20,40,80), main="ILPD Bilirubin", ylab="log(Frequency)")
summary(ILPD)
hist(log(ILPD[,3]), xlab='Count', breaks=c(0,1,2,3,4,5,7.5,10,15,20,40,80), main="ILPD Bilirubin", ylab="log(Frequency)")
hist(log(ILPD[,3]), xlab='Bilirubin', breaks=c(0,1,2,3,4,5,7.5,10,15,20,40,100), main="ILPD Bilirubin", ylab="log(Frequency)")
hist(ILPD[,3], xlab='Bilirubin', breaks=c(0,1,2,3,4,5,7.5,10,15,20,40,100), main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', breaks=c(0,.6,1.2,2,5,10,20,100), main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', breaks=c(0,.3,.6,1.2,2,5,10,20,100), main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', breaks=c(0,.3,.6,1.2,2,5,10,20,100), freq=TRUE, main="ILPD Bilirubin", )
hist(ILPD[,3], xlab='Bilirubin', breaks=c(0,.3,.6,1.2,2,5,10,20,100), freq=TRUE, main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', breaks=c(0,.3,.6,1.2,2,5,10,20,100), freq=FALSE, main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
plot(ILPD[,3], xlab='Bilirubin', log="y", main="ILPD Bilirubin", ylab="log(Frequency)")
plot(ILPD[,3], xlab='Bilirubin', log="y", type="h", main="ILPD Bilirubin", ylab="log(Frequency)")
plot(ILPD[,3], xlab='Bilirubin', log="xy", type="h", main="ILPD Bilirubin", ylab="log(Frequency)")
boxplot(ILPD[,3])
hist(log(ILPD[,3]), xlab='Bilirubin', main="ILPD Bilirubin")
log(ILPD[,3])
logBilirubin<-hist(ILPD[,3], xlab='Bilirubin', plot=FALSE, main="ILPD Bilirubin"))
logBilirubin<-hist(ILPD[,3], xlab='Bilirubin', plot=FALSE, main="ILPD Bilirubin")
logBilirubin<-hist(ILPD[,3], plot=FALSE)
logBilirubin
logBilirubin<-hist(ILPD[,3], plot=FALSE, freq=TRUE)
bilBreaks<-c(0,.3,.6,1,2,5,10,20,80)
logBilirubin<-hist(ILPD[,3], plot=FALSE, freq=TRUE, breaks=bilBreaks)
sapply(ILPD, sd)
sapply(ILPD.complete, sd)
logBilirubin<-hist(ILPD[,3], plot=FALSE, breaks=bilBreaks)
logBilirubin
bilBreaks<-c(.4,.7,1,2,5,10,20,80)
logBilirubin<-hist(ILPD[,3], plot=FALSE, breaks=bilBreaks)
logBilirubin
hist(log(logBilirubin$counts), xlab='Bilirubin', main="ILPD Bilirubin", breaks=bilBreaks)
log(logBilirubin$counts)
logBilirubin
plot(logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin")
plot(logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin", log="y")
plot(logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin")
plot(logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin", type='h')
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin", breaks=c(.4,.7,1,2,5,10,20,80))
?plot
plot(logBilirubin$mids , logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin", type='h')
plot(logBilirubin$mids , logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin")
## 1a
# assign a url to variable "url"
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv"
# Download a rectangular dataset
# vector types are used to keep the gender cols from automatically being of type logical, which are cumbersome to convert
vecClass<-c('numeric', 'character', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric')
ILPD<-read.csv(url, header=TRUE, colClasses=vecClass);
## 1b -d
# Assign headers to columns
headers <- c("Age", "Gender", "T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG", "Sel")
names(ILPD) <-headers
## 2a
# Peak at a bit of the data
head(ILPD);
## DATA CLEANING - Not explicitly instructed, but I felt it was within the spirit of the assignment
# Male/Female is non numeric, convert to isFemale
GenderCol <- ILPD[,2]
GenderCol[GenderCol == "Female"] <- 1
GenderCol[GenderCol == "Male"] <- 0
ILPD[,2]<-as.integer(GenderCol) # R will try to convert back to character unless you force it
ILPD[,2]
# The 'AG' column contains N/A values, we remove the small number of rows with such features.
ILPD.complete <- ILPD[complete.cases(ILPD),]
##2b - for both raw and cleaned data
summary(ILPD)
sapply(ILPD, mean)
sapply(ILPD.complete, mean)
sapply(ILPD, sd)
sapply(ILPD.complete, sd)
sapply(ILPD, median)
sapply(ILPD.complete, median)
##2c - this allows us to compute SD on the 'AG' column without explicitly cleaning data
sd(ILPD[,10]) # NA
sd(ILPD[,10],na.rm=TRUE) #Result
hist(ILPD[,1], xlab='Age', main="Patient Age")
hist(ILPD[,2], xlab='Encoded Gender (0=Male, 1=Female)', main="Patient Gender")
boxplot(ILPD[,3])
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
bilBreaks<-c(.4,.7,1,2,5,10,20,80)
Bilirubin<-hist(ILPD[,3], plot=FALSE, breaks=bilBreaks)
plot(Bilirubin$mids , logBilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin")
plot(Bilirubin$mids , Bilirubin$counts, xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin", freq=FALSE)
breakVec<-c(.4,.6,.8,1,2,5,10,20,80)
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin", freq=FALSE, breaks=breakVec)
hist(ILPD[,3], xlim=c(0,1), xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.8,1,1.5,2),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.7,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.7,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
#This plot does automatically to Density for the Y Scale for me, couldn't figure out how to avoid that.
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.7,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.7,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,4], xlab='Alkphos Alkaline Phosphotase', main="Alkphos Alkaline Phosphotase")
hist(ILPD[,4], xlab='Alkphos Alkaline Phosphotase', main="Alkphos Alkaline Phosphotase")
hist(ILPD[,5])
hist(ILPD[,6])
hist(ILPD[,7])
hist(ILPD[,8])
hist(ILPD[,9])
hist(ILPD[,10])
hist(ILPD[,11])
hist(ILPD[,3], xlim=c(0,3), breaks=c(0,.4,.5,.6,.7,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0.4,3), breaks=c(0,.4,.5,.6,.7,.8,1,1.5,2,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlim=c(0.4,3), breaks=c(0,.4,.5,.6,.7,.8,1,3,80),xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,4], xlab='Alkphos Alkaline Phosphotase', main="Alkphos Alkaline Phosphotase")
hist(ILPD[,4], xlab='Direct Bilirubin ', main="Direct Bilirubin ")
hist(ILPD[,6], xlab='Sgpt Alamine Aminotransferase', main="Sgpt Alamine Aminotransferase")
hist(ILPD[,11], xlab='Selector field', main="Selector field") #Probably not relevant
hist(ILPD[,10], xlab='Albumin and Globulin Ratio', main="Albumin and Globulin Ratio")
hist(ILPD[,9], xlab='Albumin', main="Albumin")
hist(ILPD[,8], xlab='Total Protiens', main="Total Protiens")
hist(ILPD[,7], xlab='Sgot Aspartate Aminotransferase ', main="Sgot Aspartate Aminotransferase ")
hist(ILPD[,6], xlab='Sgpt Alamine Aminotransferase', main="Sgpt Alamine Aminotransferase")
hist(ILPD[,5], xlab='Alkphos Alkaline Phosphotase', main="Alkphos Alkaline Phosphotase")
hist(ILPD[,4], xlab='Direct Bilirubin ', main="Direct Bilirubin ")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin", freq=F)
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin", freq=F)
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin", freq=F)
hist(ILPD[,4], xlab='Direct Bilirubin ', main="Direct Bilirubin ")
hist(ILPD[,3], xlab='Bilirubin', main="ILPD Bilirubin")
bHist<-(ILPD[,3],plot=F)
bHist<-hist(ILPD[,3], plot=F)
bHist
plot(bHist$mids,log(bHist$counts))
plot(bHist$mids,log(bHist$counts), xlab='Bilirubin', main="ILPD Bilirubin", ylab="Log(Count)")
hist(ILPD[,4], xlab='Direct Bilirubin ', main="Direct Bilirubin ")
logPlot <- function(x=c(1,2,3), xLab='x', mLab='main', yLab='y')
{
lHist<-hist(x, plot=F);
plot(lHist$mids,log(lHist$counts), xlab=xLab, ylab=yLab, main=mLab)
}
logPlot(ILPD[,3],'Bilirubin',"ILPD Bilirubin","Log(Count)")
hist(ILPD[,4], xlab='Direct Bilirubin ', main="Direct Bilirubin ")
hist(ILPD[,5], xlab='Alkphos Alkaline Phosphotase', main="Alkphos Alkaline Phosphotase")
hist(ILPD[,4], xlab="Direct Bilirubin", main="Direct Bilirubin")
hist(ILPD[,3], xlab="Bilirubin", main="ILPD Total Bilirubin")
logPlot(ILPD[,3],'Bilirubin',"ILPD Total Bilirubin","Log(Count)")
hist(ILPD[,4], xlab="Direct Bilirubin", main="Direct Bilirubin")
logPlot(ILPD[,],"","","Log(Count)")
logPlot(ILPD[,4],"Direct Bilirubin","Direct Bilirubin","Log(Count)")
hist(ILPD[,4], xlab="Direct Bilirubin", main="Direct Bilirubin")
logPlot(ILPD[,4],"Direct Bilirubin","Direct Bilirubin","Log(Count)")
hist(ILPD[,5], xlab='Alkphos Alkaline Phosphotase', main="Alkphos Alkaline Phosphotase")
logPlot(ILPD[,],"Alkphos Alkaline Phosphotase","Alkphos Alkaline Phosphotase","Log(Count)")
logPlot(ILPD[,5],"Alkphos Alkaline Phosphotase","Alkphos Alkaline Phosphotase","Log(Count)")
hist(ILPD[,6], xlab='Sgpt Alamine Aminotransferase', main="Sgpt Alamine Aminotransferase")
logPlot(ILPD[,6],"Sgpt Alamine Aminotransferase","Sgpt Alamine Aminotransferase","Log(Count)")
logPlot(ILPD[,7],"Sgot Aspartate Aminotransferase","Sgot Aspartate Aminotransferase","Log(Count)")
hist(ILPD[,7], xlab="Sgot Aspartate Aminotransferase", main="Sgot Aspartate Aminotransferase")
logPlot(ILPD[,7],"Sgot Aspartate Aminotransferase","Sgot Aspartate Aminotransferase","Log(Count)")
hist(ILPD[,8], xlab='Total Protiens', main="Total Protiens")
hist(ILPD[,9], xlab='Albumin', main="Albumin")
hist(ILPD[,10], xlab='Albumin and Globulin Ratio', main="Albumin and Globulin Ratio")
hist(ILPD[,11], xlab='Selector field', main="Selector field") #Probably not relevant
plot(ILPD)
?list
typeof(ILPD)
plot(ILPD)
subsetILPD<-list(ILPD[,3], ILPD[,4], ILPD[,5], ILPD[,6], ILPD[,7], ILPD[,8], ILPD[,9], ILPD[,10])
plot(subsetILPD)
ILPD
?dataframe
?df
typeof(ILPD[,1])
?vect
?vec
?vector
?as.vector
?subset
keeps<-c("T.B.", "D.B.", "AAP", "Sgpt", "Sgot", "TP", "ALB", "AG")
subILPD<-ILPD[keeps]
subILPD
plot(subILPD)
hist(ILPD[,1], xlab="Age", main="Patient Age")
plot(ILPD)
x<-c(-1, 1, 5, 1, 1, 17, -3, 1, 1, 3)
xHigh <- mean(x) + 3*sd(x)
xHigh
mean(x)
sd(x)
xHigh <- mean(x) + 2 * sd(x)
xHigh
xLow  <- mean(x) - 2 * sd(x)
xHigh <- median(x) + 2 * sd(x)
xHigh
xLow
x<-x[x<xHigh && x>xLow]
x
x<-x[x<xHigh & x>xLow]
x
degree<-c('BS', 'MS', 'PhD', 'HS', 'Bachelors', 'Masters', 'High School', 'BS', 'MS', 'MS')
degree[degree=='Bachelors']<-'BS'
degree[degree=='Masters']<-'MS'
degree[degree='High School']<-'HS'
degree
degree[degree=='High School']<-'HS'
degree
degree<-c('BS', 'MS', 'PhD', 'HS', 'Bachelors', 'Masters', 'High School', 'BS', 'MS', 'MS')
degree[degree=='Bachelors']<-'BS'
degree[degree=='Masters']<-'MS'
source('~/.active-rstudio-document', echo=TRUE)
degree
norm<-c(-1, 1, 5, 1, 1, 17, -3, 1, 1, 3)
minN<- min(norm)
minN
ranN<- max(norm)-minN
ranN
norm<- (norm - minN)/ranN
norm
norm<-c(-1, 1, 5, 1, 1, 17, -3, 1, 1, 3)
aveN<-mean(norm)
sdN<-sd(norm)
norm<-(norm-aveN)/sdN
norm
colors<-c('Red', 'Green', 'Blue', 'Blue', 'Blue', 'Blue', 'Blue', 'Red', 'Green', 'Blue')
isRed<-colors=='Red'
isGreen<-colors=='Green'
isBlue<-colors=='Blue'
isRed
?dataframe
??dataframe
binarayColor<-list(as.numeric(isRed),as.numeric(isGreen),as.numeric(isBlue))
vecHead<-c("Red","Blue","Green")
names(binarayColor) <-vecHead
binarayColor
binaryColor<-list(as.numeric(isRed),as.numeric(isGreen),as.numeric(isBlue))
vecHead<-c("Red","Blue","Green")
names(binaryColor) <-vecHead
binaryColor
discrete<-c(3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 23, 25, 81)
range <- max(discrete) - min(discrete)
binWidth <- range / 4
binWidth <- range / 3
?seq
binEdges <- seq(from=min(discrete), to=max(discrete), by=(max(discrete) - min(discrete))/3)
binEdges
x <- c(-3, 3, 15, 3, 15, 18, -9, -27, 13, 15, 6)
range <- max(x) - min(x)
binWidth <- range / 4
bin1Min <- -Inf
bin1Max <- min(x) + binWidth
bin2Max <- min(x) + 2*binWidth
bin3Max <- min(x) + 3*binWidth
bin4Max <- Inf
xDiscretized <- rep(NA, length(x))
xDiscretized
xDiscretized[bin1Min < x & x <= bin1Max] <- "Very Low"
xDiscretized[bin1Max < x & x <= bin2Max] <- "Low"
xDiscretized[bin2Max < x & x <= bin3Max] <- "High"
xDiscretized[bin3Max < x & x <= bin4Max] <- "Very High"
xDiscretized
beforeDiscrete<-c(3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 23, 25, 81)
binWidth <- range / 3
binEdges <- seq(from=min(discrete), to=max(discrete), by=(max(discrete) - min(discrete))/3)
discrete<-rep(NA, length(beforeDiscrete))
?range
binWidth <- (range(beforeDiscrete)$max-range(beforeDiscrete)$min)/ 3
binWidth <- (max(beforeDiscrete)-min(beforeDiscrete))/ 3
beforeDiscrete<-c(3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 23, 25, 81)
binWidth <- (max(beforeDiscrete)-min(beforeDiscrete))/ 3
binEdges <- seq(from=min(discrete), to=max(discrete), by=(max(discrete) - min(discrete))/3)
discrete<-rep(NA, length(beforeDiscrete))
beforeDiscrete<-c(3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 23, 25, 81)
binWidth <- (max(beforeDiscrete)-min(beforeDiscrete))/ 3
binEdges <- seq(from=min(beforeDiscrete), to=max(beforeDiscrete), by=(max(beforeDiscrete) - min(beforeDiscrete))/3)
discrete<-rep(NA, length(beforeDiscrete))
discrete[beforeDiscrete > binEdges[1] & beforeDiscrete < binEdges[2]] <- "Low"
discrete
beforeDiscrete
binEdges[1]
binEdges[2]
binEdges[3]
discrete[beforeDiscrete >= binEdges[1] & beforeDiscrete <= binEdges[2]] <- "Low"
discrete[beforeDiscrete > binEdges[2] & beforeDiscrete <= binEdges[3]] <- "Medium"
discrete[beforeDiscrete > binEdges[3] & beforeDiscrete <= binEdges[4]] <- "High"
discrete
beforeDiscrete<-c(3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 23, 25, 81)
binEdges<-c(3,5,7,81)
discrete<-rep(NA, length(beforeDiscrete))
discrete[beforeDiscrete >= binEdges[1] & beforeDiscrete <= binEdges[2]] <- "Low"
discrete[beforeDiscrete > binEdges[2] & beforeDiscrete <= binEdges[3]] <- "Medium"
discrete[beforeDiscrete > binEdges[3] & beforeDiscrete <= binEdges[4]] <- "High"
discrete
